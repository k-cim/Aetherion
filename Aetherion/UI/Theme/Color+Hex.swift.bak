// === File: UI/Theme/Color+Hex.swift
// Description: Helpers Color â‡„ hex + rgba parsing (iOS & macOS)

import SwiftUI

#if canImport(UIKit)
import UIKit
typealias XColor = UIColor
#else
import AppKit
typealias XColor = NSColor
#endif

extension Color {
    /// Init with "#RRGGBB" or "#RRGGBBAA" or "rgba(r,g,b,a)"
    init?(string: String) {
        let s = string.trimmingCharacters(in: .whitespacesAndNewlines)
        if s.lowercased().hasPrefix("rgba(") {
            self.init(rgbaString: s)
        } else if s.hasPrefix("#") {
            self.init(hex: s)
        } else {
            return nil
        }
    }

    /// Init with "#RRGGBB" or "#RRGGBBAA"
    init?(hex: String) {
        let h = hex.trimmingCharacters(in: .whitespacesAndNewlines).replacingOccurrences(of: "#", with: "")
        guard h.count == 6 || h.count == 8, let v = UInt64(h, radix: 16) else { return nil }

        let r, g, b, a: Double
        if h.count == 6 {
            r = Double((v & 0xFF0000) >> 16) / 255.0
            g = Double((v & 0x00FF00) >> 8)  / 255.0
            b = Double( v & 0x0000FF       ) / 255.0
            a = 1.0
        } else {
            r = Double((v & 0xFF000000) >> 24) / 255.0
            g = Double((v & 0x00FF0000) >> 16) / 255.0
            b = Double((v & 0x0000FF00) >>  8) / 255.0
            a = Double( v & 0x000000FF       ) / 255.0
        }
        self = Color(.sRGB, red: r, green: g, blue: b, opacity: a)
    }

    /// Init with "rgba(r,g,b,a)" where r,g,b in 0...255 and a in 0...1
    init?(rgbaString s: String) {
        guard s.lowercased().hasPrefix("rgba("), s.hasSuffix(")") else { return nil }
        let inner = s.dropFirst(5).dropLast()
        let parts = inner.split(separator: ",").map { $0.trimmingCharacters(in: .whitespaces) }
        guard parts.count == 4,
              let r = Double(parts[0]), let g = Double(parts[1]), let b = Double(parts[2]), let a = Double(parts[3])
        else { return nil }
        self = Color(.sRGB, red: r/255.0, green: g/255.0, blue: b/255.0, opacity: max(0, min(1, a)))
    }

    /// Best-effort hex export "#RRGGBBAA"
    func toHex() -> String {
        #if canImport(UIKit)
        let ui = XColor(self)
        guard let comps = ui.cgColor.converted(to: CGColorSpace(name: CGColorSpace.sRGB)!, intent: .defaultIntent, options: nil)?.components
        else { return "#000000FF" }
        let r = Int(round((comps[safe:0] ?? 0)*255))
        let g = Int(round((comps[safe:1] ?? 0)*255))
        let b = Int(round((comps[safe:2] ?? 0)*255))
        let a = Int(round((comps.count > 3 ? comps[3] : ui.cgColor.alpha)*255))
        return String(format: "#%02X%02X%02X%02X", r,g,b,a)
        #else
        let ns = XColor(self)
        guard let comps = ns.cgColor.converted(to: CGColorSpace(name: CGColorSpace.sRGB)!, intent: .defaultIntent, options: nil)?.components
        else { return "#000000FF" }
        let r = Int(round((comps[safe:0] ?? 0)*255))
        let g = Int(round((comps[safe:1] ?? 0)*255))
        let b = Int(round((comps[safe:2] ?? 0)*255))
        let a = Int(round((comps.count > 3 ? comps[3] : ns.cgColor.alpha)*255))
        return String(format: "#%02X%02X%02X%02X", r,g,b,a)
        #endif
    }
}

private extension Array {
    subscript(safe i: Int) -> Element? { indices.contains(i) ? self[i] : nil }
}
