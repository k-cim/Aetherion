// === File: UI/Theme/ThemeManager.swift
// Version: 3.1 (clean, with aliases)
// Date: 2025-09-15
// R√¥le : Source unique du th√®me pour toute l‚Äôapp + persistance minimale (ID) +
//         autosave d‚Äôun brouillon (theme.json) pour survivre aux crashs.
//         Fournit une API d‚Äô√©dition : livePreview / commitTheme / restore.
//         ‚ö†Ô∏è Aucun type imbriqu√©/dupliqu√©. Conserve les alias bg/fg/sec/acc/hdr/ctl.

import SwiftUI

// UI/Theme/ThemeManager.swift

@MainActor
final class ThemeManager: ObservableObject {
    @Published var theme: Theme
    @Published var colorModified: Bool = false

    private let ud = UserDefaults.standard
    private let selectedKey = "ae.selectedThemeID"      // ThemeID (enum)
    private let lastRawKey  = "ae.lastSelectedRawID"    // rawID d‚Äôun JSON (bundle/Documents)

    // MARK: - Init (dernier th√®me utilis√©)
    init(default id: ThemeID) {
        // 1) Override disque PRIORITAIRE (ou son miroir UserDefaults)
        if let override = ThemeOverrideDiskStore.loadOrMirror() {
            self.theme = override
            return
        }

        // 2) Dernier JSON ‚Äúhors enum‚Äù (bundle/Documents)
        if let raw = UserDefaults.standard.string(forKey: "ae.lastSelectedRawID"),
           let item = ThemeCatalog.shared.listThemes().first(where: { $0.id == raw }) {
            self.theme = ThemeCatalog.shared.loadTheme(from: item)
            return
        }

        // 3) ID enum persist√©
        let savedID = UserDefaults.standard.string(forKey: "ae.selectedThemeID").flatMap(ThemeID.init) ?? id
        self.theme = UserThemeStore.loadTheme(for: savedID)
    }

    // MARK: - Helpers pour m√©moriser ‚Äúdernier th√®me‚Äù
    func rememberLastBundle(rawID: String?) {
        if let rawID { ud.set(rawID, forKey: lastRawKey) }
        else { ud.removeObject(forKey: lastRawKey) }
    }

    // MARK: - API de changement rapide

    /// Applique un th√®me arbitraire (pr√©visualisation, test, etc. ‚Äî LIVE).
    func applyTheme(_ t: Theme) {
        self.theme = t
    }

    /// Applique un th√®me par ID (prend en compte JSON bundle/override) et persiste l‚ÄôID si demand√©.
    func applyID(_ id: ThemeID, persistID: Bool = true) {
        let t = UserThemeStore.loadTheme(for: id) // Override > bundle JSON > preset
        self.theme = t
        if persistID { ud.set(id.rawValue, forKey: selectedKey) }
        self.colorModified = false
    }

    /// üîß Back-compat : accepte encore `persist:` si des appels tra√Ænent
    @available(*, deprecated, message: "Use persistID: √† la place.")
    func applyID(_ id: ThemeID, persist: Bool) {
        applyID(id, persistID: persist)
    }

    /// Persiste seulement l‚ÄôID s√©lectionn√© (sans recharger le th√®me courant).
    func persistSelectedID(_ id: ThemeID) {
        ud.set(id.rawValue, forKey: selectedKey)
    }

    /// Persiste le th√®me courant dans le JSON override (√©crase/√©crit le fichier).
    func persistCurrentThemeToDisk() {
        try? ThemeOverrideDiskStore.save(theme: theme)
    }

    // MARK: - Setters ‚Äúlive‚Äù (si on pousse propri√©t√© par propri√©t√©)

    func updateBackgroundColor(_ color: Color) { theme.background = color }
    func updateCardGradient(start: Double, end: Double) {
        theme.cardStartOpacity = start
        theme.cardEndOpacity   = end
    }
    func updateGradientColors(start: Color, end: Color) {
        theme.cardStartColor = start
        theme.cardEndColor   = end
    }
    func updateHeaderColor(_ color: Color) { theme.headerColor = color }
    func updatePrimaryTextColor(_ color: Color) { theme.foreground = color }
    func updateSecondaryTextColor(_ color: Color) { theme.secondary = color }
    func updateIconColor(_ color: Color) { theme.accent = color }
    func updateControlTint(_ color: Color) { theme.controlTint = color }

    // MARK: - Flags d‚Äô√©dition (utilis√©s par ThemeConfigView / ThemeDefaultView)

    /// Indique qu‚Äôune √©dition de couleurs est en cours (UI peut afficher ‚Äúnon enregistr√©‚Äù)
    func beginColorEditing() { colorModified = true }

    /// Alias historique si tu l‚Äôappelles d√©j√† ailleurs
    func markModified() { colorModified = true }

    /// Indique qu‚Äôon a appliqu√©/annul√© (plus ‚Äúnon enregistr√©‚Äù)
    func endColorEditing() { colorModified = false }

    // MARK: - √âdition robuste (live preview, commit, restore)

    /// Applique un th√®me en **live** pendant l‚Äô√©dition (sans changer l‚ÄôID persistant).
    /// Si `autosave == true`, sauvegarde le brouillon dans theme.json pour survivre aux crashs.
    func livePreview(_ t: Theme, autosave: Bool = true) {
        self.theme = t
        self.colorModified = true
        if autosave {
            try? ThemeOverrideDiskStore.save(theme: t)
        }
    }

    /// Commit final : fixe le th√®me et, si `id` est fourni, persiste l‚ÄôID choisi.
    /// Sauvegarde √©galement la palette actuelle dans theme.json.
    func commitTheme(_ t: Theme, id: ThemeID? = nil) {
        self.theme = t
        if let id {
            ud.set(id.rawValue, forKey: selectedKey)
        }
        try? ThemeOverrideDiskStore.save(theme: t)
        self.colorModified = false
    }

    /// Rollback complet √† un snapshot (utilis√© par Annuler/Retour).
    /// √âcrit aussi le snapshot comme √©tat courant (brouillon) pour coh√©rence.
    func restore(_ snapshot: Theme) {
        self.theme = snapshot
        self.colorModified = false
        try? ThemeOverrideDiskStore.save(theme: snapshot)
    }
}

// MARK: - Compat aliases (pour ne pas retoucher toutes les vues)
// ‚ö†Ô∏è Ce sont des alias en lecture. Continue d‚Äôutiliser `theme` pour modifier.

extension ThemeManager {
    // Couleurs ‚Äúshorthand‚Äù
    var bg: Color { theme.background }
    var fg: Color { theme.foreground }
    var sec: Color { theme.secondary }
    var acc: Color { theme.accent }
    var hdr: Color { theme.headerColor }
    var ctl: Color { theme.controlTint }

    // Rayons
    var corner: CGFloat { theme.cornerRadius }

    // Gradients (ex: cartes)
    var cardGradient: LinearGradient {
        LinearGradient(
            colors: [
                theme.cardStartColor.opacity(theme.cardStartOpacity),
                theme.cardEndColor.opacity(theme.cardEndOpacity)
            ],
            startPoint: .leading, endPoint: .trailing
        )
    }

    // Background d‚Äô√©cran pratique (optionnel)
    @ViewBuilder
    var screenBackground: some View {
        theme.background.ignoresSafeArea()
    }
}
